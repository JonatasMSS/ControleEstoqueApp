// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/ClientModel/ClientModel.dart';
import 'models/ProductModel/ProductModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4641091681137049993),
      name: 'ClientModel',
      lastPropertyId: const IdUid(4, 3101558083771633160),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1037180551291471434),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8504256706050316699),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1354979157054536494),
            name: 'number',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3101558083771633160),
            name: 'date',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8594836408282404510),
      name: 'ProductModel',
      lastPropertyId: const IdUid(6, 6277369509316789433),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 773374108357839112),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2725677453996419257),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4282978400661500020),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6169736273995114098),
            name: 'quantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4671061142049788939),
            name: 'quantityToOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6277369509316789433),
            name: 'quantityMultplied',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8594836408282404510),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ClientModel: EntityDefinition<ClientModel>(
        model: _entities[0],
        toOneRelations: (ClientModel object) => [],
        toManyRelations: (ClientModel object) => {},
        getId: (ClientModel object) => object.id,
        setId: (ClientModel object, int id) {
          object.id = id;
        },
        objectToFB: (ClientModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.number);
          fbb.addOffset(3, dateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClientModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              number:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    ProductModel: EntityDefinition<ProductModel>(
        model: _entities[1],
        toOneRelations: (ProductModel object) => [],
        toManyRelations: (ProductModel object) => {},
        getId: (ProductModel object) => object.id,
        setId: (ProductModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProductModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.price);
          fbb.addInt64(3, object.quantity);
          fbb.addInt64(4, object.quantityToOrder);
          fbb.addFloat64(5, object.quantityMultplied);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              quantity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              quantityToOrder:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              quantityMultplied: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 14, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ClientModel] entity fields to define ObjectBox queries.
class ClientModel_ {
  /// see [ClientModel.id]
  static final id =
      QueryIntegerProperty<ClientModel>(_entities[0].properties[0]);

  /// see [ClientModel.name]
  static final name =
      QueryStringProperty<ClientModel>(_entities[0].properties[1]);

  /// see [ClientModel.number]
  static final number =
      QueryIntegerProperty<ClientModel>(_entities[0].properties[2]);

  /// see [ClientModel.date]
  static final date =
      QueryStringProperty<ClientModel>(_entities[0].properties[3]);
}

/// [ProductModel] entity fields to define ObjectBox queries.
class ProductModel_ {
  /// see [ProductModel.id]
  static final id =
      QueryIntegerProperty<ProductModel>(_entities[1].properties[0]);

  /// see [ProductModel.name]
  static final name =
      QueryStringProperty<ProductModel>(_entities[1].properties[1]);

  /// see [ProductModel.price]
  static final price =
      QueryDoubleProperty<ProductModel>(_entities[1].properties[2]);

  /// see [ProductModel.quantity]
  static final quantity =
      QueryIntegerProperty<ProductModel>(_entities[1].properties[3]);

  /// see [ProductModel.quantityToOrder]
  static final quantityToOrder =
      QueryIntegerProperty<ProductModel>(_entities[1].properties[4]);

  /// see [ProductModel.quantityMultplied]
  static final quantityMultplied =
      QueryDoubleProperty<ProductModel>(_entities[1].properties[5]);
}
